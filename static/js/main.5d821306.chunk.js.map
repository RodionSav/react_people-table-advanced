{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Root.tsx","index.tsx"],"names":["Navbar","getLinkClass","isActive","classNames","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuries","PeopleFilters","setSearchParams","query","get","selectedCenturies","getAll","sex","cn","type","placeholder","onChange","event","target","map","century","isSelected","includes","String","filter","c","length","href","Loader","PeopleLink","person","name","slug","PeopleTable","people","sort","order","sortedPeople","a","b","localeCompare","born","died","getPersonByName","find","useParams","criterion","selectedSort","criterionLower","toLowerCase","mother","motherName","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","error","setError","isLoading","setIsLoading","arePeople","setArePeople","useEffect","getPeople","catch","finally","filteredPeople","newQuery","trim","filterPeople","Math","ceil","Root","element","index","path","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5d821306.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n    'navbar-item', { 'has-background-grey-lighter': isActive },\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n          <NavLink\n            aria-current=\"page\"\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuries = [16, 17, 18, 19, 20];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const selectedCenturies = searchParams.getAll('centuries');\n  const sex = searchParams.get('sex') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(\n      searchParams, { query: event.target.value || null },\n    ));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({\n            'is-active': !sex,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({\n            'is-active': sex === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({\n            'is-active': sex === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map((century) => {\n              const isSelected = selectedCenturies.includes(String(century));\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={cn('button mr-1', {\n                    'is-info': selectedCenturies\n                      .includes(String(century)),\n                  })}\n                  params={{\n                    centuries: isSelected\n                      ? selectedCenturies.filter((c) => c !== String(century))\n                      : [...selectedCenturies, century.toString()],\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': selectedCenturies.length > 0,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PeopleLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    slug,\n    sex,\n  } = person;\n\n  return (\n    <NavLink\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n      to={`/people/${slug}`}\n    >\n      {name}\n    </NavLink>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PeopleLink } from './PeopleLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const sortCriterion = ['Name', 'Sex', 'Born', 'Died'];\n\n  const compareFunction = (a: Person, b: Person) => {\n    if (sort === 'name') {\n      return (order === 'desc')\n        ? b.name.localeCompare(a.name)\n        : a.name.localeCompare(b.name);\n    }\n\n    if (sort === 'sex') {\n      return (order === 'desc')\n        ? b.sex.localeCompare(a.sex)\n        : a.sex.localeCompare(b.sex);\n    }\n\n    if (sort === 'born') {\n      return (order === 'desc') ? b.born - a.born : a.born - b.born;\n    }\n\n    if (sort === 'died') {\n      return (order === 'desc') ? b.died - a.died : a.died - b.died;\n    }\n\n    return 0;\n  };\n\n  const handleSort = (selectedSort: string) => {\n    if (selectedSort !== sort) {\n      return {\n        sort: selectedSort,\n        order: null,\n      };\n    }\n\n    if (selectedSort === sort && !order) {\n      return {\n        sort: selectedSort,\n        order: 'desc',\n      };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  const sortedPeople = [...people].sort(compareFunction);\n\n  const getPersonByName = (name: string) => {\n    return people.find((person) => person.name === name);\n  };\n\n  const { slug } = useParams();\n\n  return (\n    <>\n      {sortedPeople.length > 0 && (\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              {sortCriterion.map((criterion) => {\n                const criterionLower = criterion.toLowerCase();\n\n                return (\n                  <>\n                    <th key={criterion}>\n                      <span className=\"is-flex is-flex-wrap-nowrap\">\n                        {criterion}\n                        <SearchLink params={handleSort(criterionLower)}>\n                          <span className=\"icon\">\n                            <i\n                              className={classNames('fas', {\n                                'fa-sort': sort !== criterionLower,\n                                'fa-sort-up': sort === criterionLower\n                                && order,\n                                'fa-sort-down': sort === criterionLower\n                                && !order,\n                              })}\n                            />\n                          </span>\n                        </SearchLink>\n                      </span>\n                    </th>\n\n                  </>\n                );\n              })}\n\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {sortedPeople.map((person) => {\n              const mother = person.motherName\n                ? getPersonByName(person.motherName) : null;\n\n              const father = person.fatherName\n                ? getPersonByName(person.fatherName) : null;\n\n              return (\n                <tr\n                  key={person.slug}\n                  data-cy=\"person\"\n                  className={classNames({\n                    'has-background-warning': person.slug === slug,\n                  })}\n                >\n                  <td>\n                    <PeopleLink person={person} />\n                  </td>\n                  <td>{person.sex}</td>\n                  <td>{person.born}</td>\n                  <td>{person.died}</td>\n                  <td>\n                    {mother ? <PeopleLink person={mother} />\n                      : person.motherName || '-'}\n                  </td>\n                  <td>\n                    {father ? <PeopleLink person={father} />\n                      : person.fatherName || '-'}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [arePeople, setArePeople] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const selectedCenturies = searchParams.getAll('centuries');\n  const sex = searchParams.get('sex') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople().then((response) => {\n      setPeople(response);\n\n      if (!response.length) {\n        setArePeople(true);\n      }\n    }).catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredPeople = () => {\n    const newQuery = query.toLowerCase().trim();\n    let filterPeople = [...people];\n\n    if (sex) {\n      filterPeople = filterPeople.filter((person) => person.sex === sex);\n    }\n\n    if (query.trim()) {\n      filterPeople = filterPeople.filter((person) => {\n        return (\n          person.name.toLowerCase().includes(newQuery)\n          || person.fatherName?.toLowerCase().includes(newQuery)\n          || person.motherName?.toLowerCase().includes(newQuery)\n        );\n      });\n    }\n\n    if (selectedCenturies.length) {\n      filterPeople\n      = filterPeople.filter((person) => selectedCenturies.includes(\n          Math.ceil(+person.born / 100).toString(),\n        ));\n    }\n\n    return filterPeople;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {error\n              && <p data-cy=\"peopleLoadingError\">Something went wrong</p>}\n\n              {arePeople && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && people.length > 0\n              && <PeopleTable people={filteredPeople()} />}\n\n              {!filteredPeople().length && !isLoading\n              && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from '../App';\nimport { HomePage } from './HomePage';\nimport { PeoplePage } from './PeoplePage';\n\nexport const Root = () => {\n  return (\n    <HashRouter>\n      <Routes>\n        <Route element={<App />}>\n          <Route index path=\"/\" element={<HomePage />} />\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n          <Route path=\"home\" element={(<Navigate to=\"/\" replace />)} />\n        </Route>\n      </Routes>\n    </HashRouter>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './components/Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}